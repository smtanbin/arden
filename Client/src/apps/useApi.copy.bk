/* eslint-disable @typescript-eslint/no-explicit-any */
import axios, { AxiosError, AxiosResponse } from "axios"

const _url: string = import.meta.env.VITE_SERVER_URL as string

type TokenData = {
  token: string
}

type LoginResponse = {
  status: number
  response: [string]
}

export default class Api {
  auth: {
    token: TokenData
    login: (data: TokenData) => void
    logout: () => void
  }

  constructor(auth: any) {
    this.auth = auth
  }

  /*        Use base64 and send via header
    
    useLogin = async (data: any): Promise<LoginResponse> => {
    const headers = {
      "Content-Type": "application/json",
    }

    try {
      const response: AxiosResponse<TokenData> = await axios.post(
        `${_url}/api/v1/oauth/login`,
        data,
        { headers }
      )
      console.log("Login", response.data)
      return { status: response.status, response: response.data }
    } catch (error: any) {
      const response = (error as AxiosError)?.response || {
        status: 500,
        data: "Unknown error",
      }
      return { status: response.status, response: response.data }
    }
    }
    */

  useLogin = async (
    username: string,
    password: string
  ): Promise<LoginResponse> => {
    const headers = {
      "Content-Type": "application/json",
    }

    const data = {
      username,
      password,
    }

    try {
      const response: AxiosResponse<TokenData> = await axios.post(
        `${_url}/api/v1/oauth/login`,
        data,
        { headers }
      )

      return { status: response.status, response: response.data }
    } catch (error: any) {
      const response = (error as AxiosError)?.response || {
        status: 500,
        data: "Unknown error",
      }
      return { status: response.status, response: response.data }
    }
  }

  //   useApi = async (
  //     type: "GET" | "POST",
  //     path: string,
  //     data: any = null
  //   ): Promise<any> => {
  //     const { token } = this.auth
  //     if (!token) {
  //       throw new Error("No token found")
  //     }
  //     if (!path) {
  //       throw new Error("No path found")
  //     }
  //     const headers = {
  //       "Content-Type": "application/json",
  //       Authorization: `Bearer ${token.token}`,
  //     }
  //     try {
  //       const response: AxiosResponse<any> = await axios({
  //         method: type,
  //         url: `${_url}/api${path}`,
  //         data,
  //         headers,
  //       })
  //       return response.data
  //     } catch (error: any) {
  //       if (error.response && error.response.status === 401) {
  //         console.log("401 found")
  //         const _token = await this.useRefreshToken()
  //         if (_token) {
  //           const headers = {
  //             "Content-Type": "application/json",
  //             Authorization: `Bearer ${token.token}`,
  //           }
  //           try {
  //             const response: AxiosResponse<any> = await axios({
  //               method: type,
  //               url: `${_url}/api${path}`,
  //               data,
  //               headers,
  //             })
  //             console.log("api reply: ", response.data)
  //             return response.data
  //           } catch (error: any) {
  //             console.error(`Error in useApi, Path: ${path} Error: `, error)
  //             throw error
  //           }
  //         } else {
  //           throw new Error("Token Error R")
  //         }
  //       } else {
  //         console.error(`Error in useApi, Path: ${path} Error: `, error)
  //         throw error
  //       }
  //     }
  //   }

  //   useRefreshToken = async (): Promise<boolean> => {
  //     const { token, login } = this.auth

  //     if (token.token && token.refreshToken) {
  //       const headers = {
  //         "Content-Type": "application/json",
  //         Authorization: `Bearer ${token.token}`,
  //       }

  //       const data = { refreshToken: token.refreshToken }

  //       try {
  //         const response: AxiosResponse<TokenData> = await axios.post(
  //           `${_url}/api/login/refreshToken`,
  //           data,
  //           { headers }
  //         )

  //         const newToken = response.data.token
  //         login({ token: newToken, refreshToken: token.refreshToken })
  //         return true
  //       } catch (error: any) {
  //         console.error("Error in useRefreshToken: ", error)
  //         throw error
  //       }
  //     } else {
  //       this.auth.logout()
  //       throw new Error(
  //         `Error in useRefreshToken: No token found. Token: ${token.token}, Refresh token: ${token.refreshToken}`
  //       )
  //     }
  //   }
}
